local mod = hsw_guilds

local ULID = assert(foundation.com.ULID)

-- @namespace hsw_guilds
local ic

-- @class GuildMember
local GuildMember = foundation.com.Class:extends("hsw_guilds.GuildMember")
ic = GuildMember.instance_class

-- @spec #initialize(name: String, params: Table): void
function ic:initialize(name, params)
  params = params or {}
  self.name = name
  self.role = params.role or "member"
end

-- @spec #dispose(reason: Any): void
function ic:dispose(reason)
  --
end

-- @spec #update_data(Table): self
function ic:update_data(data)
  if data.name then
    self.name = data.name
  end
  if data.role then
    self.role = data.role
  end
  return self
end

-- @class Guild
local Guild = foundation.com.Class:extends("hsw_guilds.Guild")
ic = Guild.instance_class

-- Initializes a new Guild, the id will be autogenerated
--
-- @spec #initialize(name: String, params: Table): void
function ic:initialize(name, params)
  -- @member id: String
  self.id = ULID.generate()

  -- @member name: String
  self.name = assert(name, "expected a name")

  -- @member params: Table
  self.params = params

  -- @member members: { [player_name: String]: GuildMember }
  self.members = {}
end

-- Tries to add a new member to the guild, if the member already exists:
-- false is returned, otherwise true and the GuildMember is returned instead
--
-- @spec #add_member(player_name: String, member_data: Table): (Boolean, GuildMember)
function ic:add_member(player_name, member_data)
  if self.members[player_name] then
    return false, nil
  end

  local guild_member = GuildMember:new(player_name, member_data)
  self.members[player_name] = guild_member
  return true, guild_member
end

-- Apply given function to the guild member if they exist, does nothing otherwise.
-- The function is expected to return the guild member.
--
-- @spec #map_member(player_name: String, callback: function(GuildMember) => GuildMember):
--   (Boolean, GuildMember?)
function ic:map_member(player_name, callback)
  local guild_member = self.members[player_name]

  if guild_member ~= nil then
    guild_member = callback(guild_member)
    self.members[player_name] = guild_member
    return true, guild_member
  end

  return false, nil
end

-- @spec #update_member(player_name: String, member_data: Table)
function ic:update_member(player_name, member_data)
  return map_member(player_name, function (guild_member)
    guild_member:update_data(member_data)
    return guild_member
  end)
end

-- @spec #remove_member(player_name: String, reason?: Any): Boolean
function ic:remove_member(player_name, reason)
  local guild_member = self.members[player_name]
  if guild_member then
    guild_member:dispose(reason)
    self.members[player_name] = nil
    return true, guild_member
  end

  return false, nil
end

-- @spec #get_member(player_name: String): GuildMember?
function ic:get_member(player_name)
  return self.members[player_name]
end

-- Determines if a member exists in the guild
--
-- @spec #has_member(player_name: String): Boolean
function ic:has_member(player_name)
  return self.members[player_name] ~= nil
end

-- @class Guilds
local Guilds = foundation.com.Class:extends("hsw_guilds.Guilds")
ic = Guilds.instance_class

-- Initializes the Guilds management system.
--
-- @spec #initialize(): void
function ic:initialize()
  -- @member registered_guilds: { [guild_name: String]: Guild }
  self.registered_guilds = {}

  -- A table containing all known guild members.
  --
  -- @member known_members: { [player_name: String]: { [guild_name: String]: Boolean } }
  self.known_members = {}
end

-- Attempts to register the specified guild, the name should be the display name
-- of the guild, the id will be derived from the guild name
--
-- @spec #try_register_guild(name: String, params: Table): (success: Boolean, Guild?)
function ic:try_register_guild(name, params)
  assert(type(name) == "string", "expected a guild name")
  assert(type(params) == "table", "expected some parameters")

  if self.registered_guilds[name] then
    return false, nil
  end

  local guild = Guild:new(name, params)
  self.registered_guilds[guild.id] = guild

  return true, guild
end

-- @spec #try_register_player_guild(player_name: String, guild_name: String, params: Table):
--   (success: Boolean, Guild?)
function ic:try_register_player_guild(player_name, guild_name, params)
  if self.known_members[player_name] then
    -- the player is already a member of a guild
    -- TODO: return a error table notifying the caller what exactly happened
    return false, nil
  end

  local success, guild_or_error = self:try_register_guild(guild_name, params)

  if success then
    local guild = guild_or_error
    -- should always be successful
    assert(self:set_guild_founder(guild.id, player_name))

    local member
    success, member = self:add_player_to_guild(player_name, guild_id, { role = "leader" })
    assert(success, "expected to add player as leader of guild")
    assert(member.role == "leader", "expected member to be leader")

    return true, guild
  end

  return success, guild_or_error
end

-- Sets the name of the founding player on the guild.
--
-- @spec #set_guild_founder(guild_id: String, founder_name: String): (success: Boolean, Guild?)
function ic:set_guild_founder(guild_id, founder_name)
  local guild = self.registered_guilds[guild_id]

  if guild then
    guild.founder = founder_name
    return true, guild
  end

  return false, nil
end

-- @spec #add_player_to_guild(player_name: String, guild_id: String, params: Table):
--   (success: Boolean, GuildMember?)
function ic:add_player_to_guild(player_name, guild_id, params)
  local guild = self.registered_guilds[guild_id]

  if guild then
    local success, guild_member = guild:add_member(player_name, params)

    if success then
      if not self.known_members[player_name] then
        self.known_members[player_name] = {}
      end
      self.known_members[player_name][guild_id] = true
    end

    return success, guild_member
  end

  return false, nil
end

-- @spec #remove_player_from_guild(player_name: String, guild_id: String, reason: Any):
--   (success: Boolean, GuildMember?)
function ic:remove_player_from_guild(player_name, guild_id, reason)
  local known_member = self.known_members[player_name]
  if known_member then
    if known_member[guild_id] then
      local success, guild_member =
        self.registered_guilds[guild_id]:remove_member(player_name, reason)

      if success then
        known_member[guild_id] = nil
        if not next(known_member) then
          self.known_members[player_name] = nil
        end
      end

      return success, guild_member
    end
  end

  return false, nil
end

-- @spec #is_player_in_guild(player_name: String, guild_id: String): Boolean
function ic:is_player_in_guild(player_name, guild_id)
  local known_member = self.known_members[player_name]

  if known_member then
    return known_member[guild_id] == true
  end

  return false
end

-- @spec #get_player_primary_guild(player_name: String): Guild?
function ic:get_player_primary_guild(player_name)
  local known_member = self.known_members[player_name]

  if known_member then
    local guild_id, bool = next(known_member)

    if bool then
      return self.registered_guilds[guild_id]
    end
  end

  return nil
end

hsw_guilds.GuildMember = GuildMember
hsw_guilds.Guild = Guild
hsw_guilds.Guilds = Guilds
